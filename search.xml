<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>全基因组分析_基因型定相和填充(Phasing and Imputation)</title>
      <link href="/2020/06/15/%E5%85%A8%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%88%86%E6%9E%90_%E5%9F%BA%E5%9B%A0%E5%9E%8B%E5%AE%9A%E7%9B%B8%E5%92%8C%E5%A1%AB%E5%85%85(Phasing%20and%20Imputation)/"/>
      <url>/2020/06/15/%E5%85%A8%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%88%86%E6%9E%90_%E5%9F%BA%E5%9B%A0%E5%9E%8B%E5%AE%9A%E7%9B%B8%E5%92%8C%E5%A1%AB%E5%85%85(Phasing%20and%20Imputation)/</url>
      
        <content type="html"><![CDATA[<h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p><strong>Phasing，基因定相/基因分型/单倍体分型</strong>：将二倍体or多倍体基因组上的等位基因，按照其亲本正确定位到父亲or母亲的染色体上，最终使得所有来自同一个亲本的等位基因都能够排列再同一条染色体中。</p><p><strong>Imputation，基因型填充</strong>。对基因型缺失的位点进行填补（Imputation）对这个位点的基因型规律进行总结，然后对缺失位点归到某类中，赋予其一个最可能的基因型。而基因型缺失missing主要有两种可能：</p><ul><li>遗传性缺失：个体遗传信息的变异而导致这个位点的DNA片段是<strong>真实的缺失</strong></li><li>技术型缺失：由于探针杂交效率低，或多是测序深度较低，导致一些位点是未被测到，不可避免会产生大量的<strong>随机缺失</strong></li></ul><h3 id="定相-amp-填充-Phasing-amp-Imputaion-的重要性"><a href="#定相-amp-填充-Phasing-amp-Imputaion-的重要性" class="headerlink" title="定相&amp;填充(Phasing &amp; Imputaion)的重要性"></a>定相&amp;填充(Phasing &amp; Imputaion)的重要性</h3><p><strong>定相Phasing</strong>：对于遗传变异的功能诠释密切相关。表现在遗传诊断需要了解基因突变的单倍型时，才能判断是否会产生临床症状。</p><ul><li>单倍型参考序列集（Reference panel）是基因型填充（imputation）所必须的数据材料。后者是基因型表型分析中不可少的环节。高质量的Reference Panel能提升关联分析的统计功效</li><li>除了Reference Panel的制造需要使用Phasing技术之外，对被研究的对象进行预先Phasing(Pre-phasing)也可以极大地提高基因型推断（Imputation）的准确性</li><li>多个位点组成的单倍型（Haplotype）而非单位点基因型，可实现群体遗传历史的推断。</li><li>可通过Phased后的家系人群单倍型序列，估算染色体重组率、重组热点等重要遗传参数；探测频发突变、选择信号以及基因表达的顺势调控</li></ul><p><strong>填充Imputation</strong>：基因型缺失造成信息丢失，对下游基因型-表型关联分析（GWAS分析，选择压力分析，QTL定位等）都会造成很大影响</p><h3 id="Phasing-amp-Imputaion常用方法"><a href="#Phasing-amp-Imputaion常用方法" class="headerlink" title="Phasing &amp; Imputaion常用方法"></a>Phasing &amp; Imputaion常用方法</h3><h4 id="1-Phasing的方法"><a href="#1-Phasing的方法" class="headerlink" title="1. Phasing的方法"></a>1. Phasing的方法</h4><p>Phasing的方法主要有三个：家系分型（Related individuals phasing）、群体LD分型（LD-phasing）和物理分型（Physical Phasing）</p><ul><li>家系分型（Related Individuals Phasing）：同时对父亲和母亲（或家族中人员）的基因组进行测序。可以推断出样本的两个单倍型。但对于个体和亲本的位点都是杂合的，不可被phasing</li><li>群体LD phasing。根据连算不平衡原理（Linkage disequilibrium）和相关数学模型推断群体中每个个体的单倍体。根据染色体未重组的连锁不平衡区块（LD-block）的关系，利用隐马模型(HMM)等算法可以反推断出个体最有可能的单倍体型。（<strong>由于这个方法需要依据群体的信息，那么它所能够Phasing的精度就会受到群体的制约，对于常见变异，如频率在5%以上的变异效果较好</strong>）</li><li>物理定相：根据自身的测序数据：因为二三代测序的reads是来自同一个染色体。根据这些小的局部来连成整体。</li></ul><h4 id="2-Impuation的方法"><a href="#2-Impuation的方法" class="headerlink" title="2. Impuation的方法"></a>2. Impuation的方法</h4><p>Imputation：分析各个区域的单倍体组成，总结这个区域的基因型规律并分类。然后再根据某样本缺失位点的其它非缺失位点，判断这个区域属于哪种单倍型，然后再根据所属的基因型来填补此缺失样本的缺失位点信息。<br><img src="https://cdn.jsdelivr.net/gh/wang-tianpeng/image_hosting/tianpeng_pic/20200615155843.png" alt="Imputation process"><br>根据多个个体构成的参考单倍型集合（Reference Haplotypes）推断整个群体的单倍型构成。再根据缺失样本有限的基因型信息（仅有3个位点），就可以判断这个样本与参考单倍型集中的哪种单倍型最为相似。</p><ul><li>对于没有参考数据集，利用群体本身的基因型数据推断缺失位点（常用于动植物研究）对低深度测序的数据进行imputation</li><li>对于人类的有参考数据集的，直接利用即可。</li></ul><h4 id="3-常用软件"><a href="#3-常用软件" class="headerlink" title="3. 常用软件"></a>3. 常用软件</h4><p>计算密集型,比如IMPUTE、 IMPUTE2、MACH、 和fastPHASE/BIMBAM。填充的过程中充分考虑到全部可以观察到的基因型信息，使得对缺失值的估算更加精确；但以上大部分软件都是针对人类的开发的。人类种群的遗传特性是个体杂合率较高、近交率低、系谱关系来源随机。很多植物，尤其作物的遗传特性则和人类相反。以玉米为例，玉米在育种过程中，会伴随大量的自交，因此纯合度较高，而且系谱关系（杂交方式）往往可控。以上针对人类学开发的软件就未必适用了。如果是遗传特性与玉米类似的植物的GBS数据，可以采用Tassel中包含的imputation模块。</p><p>计算高效型，比如PLINK、TUNA、WHAP和BEAGLE。此种算法仅仅关注与特定位点相邻的一小部分标记的基因型，因此在计算上更加快捷。表1列出了4种常见的基因型填充软件的特性</p><h3 id="实例学习"><a href="#实例学习" class="headerlink" title="实例学习"></a>实例学习</h3><p>以BEAGLE 5.1软件学习IMPUTATION。[<a href="http://faculty.washington.edu/browning/beagle/beagle.html#download]" target="_blank" rel="noopener">http://faculty.washington.edu/browning/beagle/beagle.html#download]</a></p><p>Beagle包含了利用家系（Related individual Phasing）和LD Phasing的模块, 如果输入的vcf文件是没有phasing的，会先进行定相，然后填充。下载基于JAVA</p><p><strong>beagle5.1参数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">data parameters ...</span><br><span class="line">  gt=&lt;VCF file: use GT field&gt;                        (optional)</span><br><span class="line">  ref=&lt;bref3 or VCF file with phased genotypes&gt;      (optional)</span><br><span class="line">  out=&lt;output file prefix&gt;                           (required)</span><br><span class="line">  map=&lt;PLINK map file with cM units&gt;                 (optional)</span><br><span class="line">  chrom=&lt;[chrom] or [chrom]:[start]-[end]&gt;           (optional)</span><br><span class="line">  excludesamples=&lt;file with 1 sample ID per line&gt;    (optional)</span><br><span class="line">  excludemarkers=&lt;file with 1 marker ID per line&gt;    (optional)</span><br><span class="line"></span><br><span class="line">phasing parameters ...</span><br><span class="line">  burnin=&lt;number of burnin iterations&gt;               (default=6)</span><br><span class="line">  iterations=&lt;number of phasing iterations&gt;          (default=12)</span><br><span class="line">  phase-states=&lt;model states for phasing&gt;            (default=280)</span><br><span class="line"></span><br><span class="line">imputation parameters ...</span><br><span class="line">  impute=&lt;impute ungenotyped markers (true/false)&gt;   (default=true)</span><br><span class="line">  imp-states=&lt;model states for imputation&gt;           (default=1600)</span><br><span class="line">  imp-segment=&lt;min haplotype segment length (cM)&gt;    (default=6.0)</span><br><span class="line">  imp-step=&lt;IBS step length (cM)&gt;                    (default=0.1)</span><br><span class="line">  imp-nsteps=&lt;number of IBS steps&gt;                   (default=7)</span><br><span class="line">  cluster=&lt;max cM in a marker cluster&gt;               (default=0.005)</span><br><span class="line">  ap=&lt;print posterior allele probabilities&gt;          (default=false)</span><br><span class="line">  gp=&lt;print posterior genotype probabilities&gt;        (default=false)</span><br><span class="line"></span><br><span class="line">general parameters ...</span><br><span class="line">  ne=&lt;effective population size&gt;                     (default=1000000)</span><br><span class="line">  err=&lt;allele mismatch rate&gt;                         (default: data dependent)</span><br><span class="line">  window=&lt;window length in cM&gt;                       (default=40.0)</span><br><span class="line">  overlap=&lt;window overlap in cM&gt;                     (default=4.0)</span><br><span class="line">  seed=&lt;random seed&gt;                                 (default=-99999)</span><br><span class="line">  nthreads=&lt;number of threads&gt;                       (default: machine dependent)</span><br></pre></td></tr></table></figure><p><strong>实际例子</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">### 下载beagle5.1</span><br><span class="line">wget http://faculty.washington.edu/browning/beagle/beagle.18May20.d20.jar</span><br><span class="line">wget http://faculty.washington.edu/browning/beagle/bref3.18May20.d20.jar</span><br><span class="line"></span><br><span class="line">### 下载测试数据</span><br><span class="line">wget http://faculty.washington.edu/browning/beagle/test.18May20.d20.vcf.gz</span><br><span class="line">zcat test.18May20.d20.vcf.gz | cut -f1-190 | tr &apos;/&apos; &apos;|&apos; | gzip &gt; ref.18May20.d20.vcf.gz</span><br><span class="line">zcat test.18May20.d20.vcf.gz | cut -f1-9,191-200 | gzip &gt; target.18May20.d20.vcf.gz</span><br><span class="line"></span><br><span class="line">### 运行beagle软件进行imputation</span><br><span class="line">java -Xmx14256m -jar beagle.18May20.d20.jar gt=test.18May20.d20.vcf.gz out=out.gt</span><br><span class="line"></span><br><span class="line">### 提供phasing数据集ref panels</span><br><span class="line">java -jar beagle.18May20.d20.jar ref=ref.18May20.d20.vcf.gz gt=target.18May20.d20.vcf.gz out=out.ref</span><br><span class="line"></span><br><span class="line">### 对参考数据集ref构建bref3</span><br><span class="line">java -jar bref3.18May20.d20.jar ref.18May20.d20.vcf.gz &gt; ref.18May20.d20.bref3</span><br><span class="line">java -jar beagle.18May20.d20.jar ref=ref.18May20.d20.bref3 gt=target.18May20.d20.vcf.gz out=out.bref3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 参考其它文章命令行</span><br><span class="line">nohup java -Xss5m -Xmn25G -Xms100G -Xmx100G -jar soft/beagle/beagle.12Jul19.0df.jar nthreads=2 gt=172sample.recode.vcf out=172sample_out ne=172</span><br><span class="line">#可能会遇到内存溢出的报错，较花时间。</span><br></pre></td></tr></table></figure><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://www.jianshu.com/p/a30de54b83c3" target="_blank" rel="noopener">人类基因组的Phasing原理是什么？</a></p><p><a href="https://www.jianshu.com/p/c99702068b4a" target="_blank" rel="noopener">用Beagle做基因型填充（Imputation）</a></p><p><a href="https://www.omicshare.com/forum/thread-1293-1-1.html" target="_blank" rel="noopener">重测序数据中的基因型缺失以及缺失数据填充</a></p><p><a href="http://faculty.washington.edu/browning/beagle/beagle.html#download" target="_blank" rel="noopener">BEAGLE参考文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 群体遗传 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基因型填充 </tag>
            
            <tag> Imputation </tag>
            
            <tag> Phasing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基因渐渗分析——introgression</title>
      <link href="/2020/05/21/%E5%9F%BA%E5%9B%A0%E6%B8%90%E6%B8%97%E5%88%86%E6%9E%90%E2%80%94%E2%80%94introgression/"/>
      <url>/2020/05/21/%E5%9F%BA%E5%9B%A0%E6%B8%90%E6%B8%97%E5%88%86%E6%9E%90%E2%80%94%E2%80%94introgression/</url>
      
        <content type="html"><![CDATA[<blockquote><p>已看到多篇NG文献中对于introgression分析的方法都直接引用网址<a href="https://github.com/simonhmartin/tutorials/blob/master/ABBA_BABA_windows/，近期可能需要处理一批基因的分析，故详细学习此篇教程" target="_blank" rel="noopener">https://github.com/simonhmartin/tutorials/blob/master/ABBA_BABA_windows/，近期可能需要处理一批基因的分析，故详细学习此篇教程</a></p></blockquote><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p><strong>基因渐渗(introgression)</strong>:，Introgression is the movement of a gene from one species into the gene pool of another by the repeated backcrossing of an interspecific hybrid with one of its parent species。关键点：属于<strong>两个物种之间</strong>的基因流动，通常是<strong>后代种</strong>与<strong>祖先种</strong>的反复回交实现祖先种的一些基因区段(表现为潜在的祖先性状)再次出现在后代种当中。</p><p><strong>ABBA-BABA统计</strong>：也称为D统计量，是研究基因渐渗的经典方法。在一个给定的拓扑关系(((H1,H2),H3),H4)。H1,H2是姊妹类群(多为一个物种内的两个种群)，H3是潜在的基因渐渗来源物种，H4是外类群。假设祖先H4的位点为A，潜在渐渗祖先种H3位点为B，则如果不存在H3的渐渗，则H1和H2的两个种群为AB或者BA的概率各为50%，而如果H3对H2存在有渐渗作用，则H2为B，H1为A的概率大于H2为A的概率。</p><p>以下即为计算D-统计量的方法，当D值为0时，表示H1,H2与H3不存在渐渗，当D大于0，则表示ABBA的情况更多，表示H2和H3之间的关系相对于H1更近，即存在于H3到H2的渐渗。D值范围-1~1。<br><img src="https://cdn.jsdelivr.net/gh/wang-tianpeng/image_hosting/tianpeng_pic/20200521195712.png" alt="ABBA-BABA"><br><img src="https://cdn.jsdelivr.net/gh/wang-tianpeng/image_hosting/tianpeng_pic/20200521195734.png" alt="ABBA-BABA统计计算方法"></p><p><strong>其它统计量</strong>还包括:partition D-statistic, 以及近期较为流行的fd统计值,fdm统计值等。</p><h2 id="数据准备和解释"><a href="#数据准备和解释" class="headerlink" title="数据准备和解释"></a>数据准备和解释</h2><ul><li>教程数据来源于<strong>3个物种multi种群和1个外类群物种</strong>的全基因组数据(whole-genome sequencing Data)<br>3个物种Hm, Ht, Hc。这三个物种下的多个种群之间存在着同域物种分布(sympatry)，故推测存在有两个物种种群之间的杂交渐渗。</li><li>数据为高深度WGS数据，已经过过滤得到双位点的SNP位点。特定的，数据仅包括18号染色体的数据，已知此染色体上的翅膀花纹颜色基因。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wang-tianpeng/image_hosting/tianpeng_pic/20200521195631.png" alt=""></p><ul><li>推测处于同一区域的两个物种之间存在有渐渗造成的基因流(sharing of genetic variation)，例如Hc-chi和Hm-ros等等。已知位于18号染色体上的花纹基因<em>optix</em> 受到强烈选择。在一个区域的物种或通过趋同演化(independent convergent evolution)或者适应性的渐渗作用(adaptive introgression)获得此适应性的optix基因。</li></ul><h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><h4 id="1-数据准备"><a href="#1-数据准备" class="headerlink" title="1. 数据准备"></a>1. 数据准备</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/simonhmartin/tutorials/raw/master/ABBA_BABA_windows/data/hel92.DP8HET75MP9BIminVar2.chr18.geno.gz</span><br><span class="line"></span><br><span class="line">wget https://github.com/simonhmartin/tutorials/raw/master/ABBA_BABA_windows/data/hel92.pop.txt</span><br><span class="line"></span><br><span class="line">wget https://github.com/simonhmartin/tutorials/raw/master/ABBA_BABA_windows/data/chr18.LDhelmet_MLrho.w100.tsv</span><br><span class="line"></span><br><span class="line">### 脚本</span><br><span class="line">wget https://github.com/simonhmartin/genomics_general/archive/master.zip</span><br></pre></td></tr></table></figure><h4 id="2-滑动窗口检测Sliding-window-analysis"><a href="#2-滑动窗口检测Sliding-window-analysis" class="headerlink" title="2. 滑动窗口检测Sliding window analysis"></a>2. 滑动窗口检测Sliding window analysis</h4><ul><li><p>教程中的情况为(((P1,P2),P3),O)，P1为Hm.mel(mel_mel)，检测在巴拿马地区的P2(mel_ros)是否受到同域分布的P3(cyd_chi)渐渗影响；在秘鲁地区的P2(mel_ama)是否受到P3(tim_txn)的渐渗作用两种情况的外类群O均为H.num。</p></li><li><p>ABBABABAwindows.py程序基本参数</p><ul><li><code>-g</code> 基因型geno文件。</li><li><code>-f</code> 基因型文件的类型phased,pairs,haplo,diplo</li><li><code>-P1, P2, P3, P4</code>种群的名称</li><li><code>--popFile</code>:样本-种群的说明文件</li><li><code>-w</code> window大小</li><li><code>-s</code> 步移的大小</li><li><code>-m</code> 窗口最少位点数</li><li><code>-o</code> 输出文件</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">### 巴拿马地区的渐渗检测</span><br><span class="line">python ../genomics_general-master/ABBABABAwindows.py -g hel92.DP8HET75MP9BIminVar2.chr18.geno.gz \</span><br><span class="line">-f phased \</span><br><span class="line">-P1 mel_mel -P2 mel_ros -P3 cyd_chi -O num \</span><br><span class="line">--popsFile hel92.pop.txt -w 25000 -m 250 --T 3 \</span><br><span class="line">-o hel92.DP8HET75MP9BIminVar2.chr18.ABBABABA_mel_ros_chi_num.w25m250.csv.gz</span><br><span class="line"></span><br><span class="line">### 秘鲁地区的渐渗检测</span><br><span class="line">python genomics_general-master/ABBABABAwindows.py \</span><br><span class="line">-g data/hel92.DP8HET75MP9BIminVar2.chr18.geno.gz -f phased \</span><br><span class="line">-o data/hel92.DP8HET75MP9BIminVar2.chr18.ABBABABA_mel_ama_txn_num.w25m250.csv.gz \</span><br><span class="line">-P1 mel_mel -P2 mel_ama -P3 tim_txn -O num \</span><br><span class="line">--popsFile data/hel92.pop.txt -w 25000 -m 250 --T 2</span><br></pre></td></tr></table></figure><ul><li>输出结果已包括计算的D值、fd值、fdM值<br><img src="https://cdn.jsdelivr.net/gh/wang-tianpeng/image_hosting/tianpeng_pic/20200521164617.png" alt="结果文件"></li></ul><h4 id="3-简单绘图显示D值、fd值"><a href="#3-简单绘图显示D值、fd值" class="headerlink" title="3. 简单绘图显示D值、fd值"></a>3. 简单绘图显示D值、fd值</h4><ul><li>读取文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">AB_files &lt;- c(&quot;hel92.DP8HET75MP9BIminVar2.chr18.ABBABABA_mel_ros_chi_num.w25m250.csv.gz&quot;,</span><br><span class="line">              &quot;hel92.DP8HET75MP9BIminVar2.chr18.ABBABABA_mel_ama_txn_num.w25m250.csv.gz&quot;)</span><br><span class="line">AB_tables = lapply(AB_files, read.csv)</span><br><span class="line"></span><br><span class="line">head(AB_tables[[1]])</span><br><span class="line">head(AB_tables[[2]])</span><br></pre></td></tr></table></figure><ul><li>注意，如果D值为负，则fd值是无意义的。故设置所有fd值为0，当D值为负数时。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (x in 1:length(AB_tables))&#123;</span><br><span class="line">  AB_tables[[x]]$fd = ifelse(AB_tables[[x]]$D &lt; 0, 0, AB_tables[[x]]$fd)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>简单绘图</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">par(mfrow=c(length(AB_tables), 1), mar = c(4,4,1,1))</span><br><span class="line">for (x in 1:length(AB_tables))&#123;</span><br><span class="line">  plot(AB_tables[[x]]$mid, AB_tables[[x]]$fd,</span><br><span class="line">       type = &quot;l&quot;, xlim=c(0,17e6),ylim=c(0,1),ylab=&quot;Admixture Proportion&quot;,xlab=str_c(&quot;Position&quot;,x))</span><br><span class="line">  rect(1000000,0,1250000,1, col = rgb(0.5,0,0,0.2), border=NA)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果解释：总体显示，在此18号染色体上存在显著的introgression。特定的，仅观察色斑基因optix附近区域，在巴拿马地区cyd_chi对mel_ros的渐渗率很低，这也体现在二者的色斑相差很大；而在秘鲁地区的tim_txn对mel_ama渐渗率很高，这也体现在二者有相似的色斑颜色。此趋同演化现象即是渐渗作用引起的。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wang-tianpeng/image_hosting/tianpeng_pic/20200521195507.png" alt="fd_window"></p><h4 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h4><p><a href="https://github.com/simonhmartin/tutorials/blob/master/ABBA_BABA_windows/" target="_blank" rel="noopener">https://github.com/simonhmartin/tutorials/blob/master/ABBA_BABA_windows/</a> (多篇NG文献直接引用此教程方法)</p><p><a href="http://www.360doc.com/content/19/0403/22/52645714_826276681.shtml" target="_blank" rel="noopener">http://www.360doc.com/content/19/0403/22/52645714_826276681.shtml</a></p><p><a href="https://www.bilibili.com/read/cv6041247" target="_blank" rel="noopener">https://www.bilibili.com/read/cv6041247</a></p>]]></content>
      
      
      <categories>
          
          <category> 分析教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基因渐渗 </tag>
            
            <tag> introgression </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BCFtools使用说明</title>
      <link href="/2020/04/03/BCFtools%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
      <url>/2020/04/03/BCFtools%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h3 id="BCFTOOLS基本说明"><a href="#BCFTOOLS基本说明" class="headerlink" title="BCFTOOLS基本说明"></a>BCFTOOLS基本说明</h3><p>bcftools由samtools开发者Li Heng所写，主要功能为变异检测和VCF/BCF文件的各种操作。支持gz压缩和未压缩的vcf/bcf输入文件。多数情况下，输入文件vcf是需要压缩并建立索引index的。</p><h3 id="通用参数"><a href="#通用参数" class="headerlink" title="通用参数"></a>通用参数</h3><ul><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 生信工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VCFTOOLS使用说明</title>
      <link href="/2020/04/03/VCFtools%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
      <url>/2020/04/03/VCFtools%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h3 id="VCFTOOLS基本说明"><a href="#VCFTOOLS基本说明" class="headerlink" title="VCFTOOLS基本说明"></a>VCFTOOLS基本说明</h3><p>vcftools为专门处理vcf/bcf文件而生，此工具能处理VCF数据包括：过滤(filter), ；变异位点的基本统计；数据格式的转换；多个vcf文件的比较（compare files）；集合运算。</p><p>目前常用版本v0.1.16。官方网站[<a href="https://vcftools.github.io/index.html]" target="_blank" rel="noopener">https://vcftools.github.io/index.html]</a></p><p><strong>vcftools [ –vcf/gzvcf/bcf FILE ] [ –out OUTPUT PREFIX ] [ FILTERING OPTIONS ] [ OUTPUT OPTIONS ]</strong></p><h4 id="输入参数"><a href="#输入参数" class="headerlink" title="输入参数"></a>输入参数</h4><ul><li><code>--vcf</code></li><li><code>--gzvcf</code>输入gz压缩的vcf文件</li><li><code>--bcf</code></li></ul><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><ul><li><code>-out</code> 输出文件</li><li><code>--stdout/-c</code>标准输入，可后接管道操作</li><li><code>--temp</code>指定输出目录</li></ul><h4 id="过滤参数"><a href="#过滤参数" class="headerlink" title="过滤参数"></a>过滤参数</h4><ol><li><p><strong>根据位置进行过滤</strong></p><ul><li><code>--chr</code>, <code>--not-chr</code>指定过滤选择某染色体，可多次使用</li><li><code>--from-bp INT</code>, <code>--to-bp</code>，需和–chr一起使用，指定区域</li><li><code>--positions FILE</code>,<code>--exclude-positions</code>接tab分割的多个坐标位置文件</li><li><code>--bed FILE</code>,<code>--exclude-bed</code>根据<strong>BED文件进行过滤</strong></li></ul></li><li><p><strong>根据指定ID位点过滤</strong></p><ul><li><code>--snp</code> 根据vcf文件第三列ID列的snp名进行过滤。</li><li><code>--snps FILE</code>, <code>--exclude</code>根据ID文件进行过滤</li></ul></li><li><p><strong>变异类型过滤</strong></p><ul><li><code>--keep-only-indels</code></li><li><code>--remove-indels</code>即保留或去除SNP，留下INDEL。</li></ul></li><li><p><strong>根据VCF文件第七列FILTER进行过滤</strong></p><ul><li><code>--remove-filterer-all</code>FILTER列除了PASS保留，其余都过滤</li><li><code>--keep-filtered</code>,<code>--remove-filtered</code>保留或去除特定FILTER标签。可多次使用。</li></ul></li><li><p><strong>根据vcf第八列INFO进行过滤</strong></p><ul><li><code>--keep-INFO</code></li><li><code>--remove-INFO</code>根据INFO列的指定tag进行过滤</li></ul></li><li><p><strong>根据ALLEL进行过滤</strong></p><ul><li><code>--maf</code>,<code>--max-maf</code> Minor Allele Frequency二等位基因频率进行过滤，常为–maf 0.05，保留大于0.05的。</li><li><code>--non-ref-af</code>,<code>--non-ref-ac</code>…. 保留都是ALT变异的位点。</li><li><code>--mac INT</code>,<code>--max-mac</code> 保留Minor Allel Count数大于INT数的位点</li><li><code>--min-alleles 2</code>, <code>--max-alleles 2</code>筛选保留含有2个ALT变异的位点。常用。</li></ul></li><li><p><strong>根据基因型GENOTYPE数值进行过滤</strong></p><ul><li><code>--min-meanDP</code>,<code>--max-meanDP</code>根据平均覆盖深度进行过滤。–min-meanDP 3</li><li><code>--hwe</code>哈温平衡检测，根据pvalue值进行过滤，保留值以内的。–hwe 0.01</li><li><code>--max-missing</code>常用，缺失率，0为接受完全缺失，1为接受数据全都存在。一般0.8</li><li><code>--max-missing-count INT</code>缺失的个体数目超过INT，即被过滤。</li><li><code>--phased</code> 删除unpased位点</li><li><code>--minQ</code> 保留Quality值大于INT的位点。</li></ul></li><li><p><strong>对样品个体进行过滤</strong></p><ul><li><code>--indv</code>, <code>--remove-indv</code>保留或删除指定样本</li><li><code>--keep FILE</code>,<code>--remove</code> 保留/删除多个体的文件</li><li><code>--max-indv INT</code>随机保留INT数目的样本。</li></ul></li><li><p><strong>基因型过滤</strong></p><ul><li><code>--remove-filtered-geno-all</code>, <code>--remove-filtered-geno</code> 保留/删除 FILTER FLAG的位点。</li><li><code>--minGQ</code> 删除GQ值低于数值的位点</li><li><code>--minDP</code>,<code>--maxDP</code>保留覆盖率min~max范围内的位点。</li></ul></li></ol><h4 id="计算统计参数"><a href="#计算统计参数" class="headerlink" title="计算统计参数"></a>计算统计参数</h4><ol><li><strong>输出变异位点的计算统计</strong><ul><li><code>--freq</code>, <code>--freq2</code>输出每个等位基因位点的频率。</li><li><code>--counts</code>,位点数目的统计</li></ul></li><li><strong>位点覆盖深度Depth统计</strong><ul><li><code>depth</code>输出每个个体的平均覆盖度，以idepth文件展示</li><li><code>--site-depth</code>,<code>--site-mean-depth</code>每个位点的所有个体深度</li><li><code>--geno-depth</code>每个基因型的覆盖深度文件</li></ul></li><li><strong>LD计算(Linkage Disequilibrium)</strong><ul><li><code>--hap-r2</code>同时输出r^2值, D值和D’值。传统LD值计算方法，输出hap.ld</li><li><code>--geno-r2</code>，方法同PLINK软件，计算squared correlation coefficient，输出geno.ld</li><li><code>--geno-chisq</code>, </li><li><code>--hap-r2-positions FILE</code>, <code>--geno-r2-positions FILE</code>和已有文件中的点做LD计算</li><li><code>--ld-window INT</code> LD计算的最大SNP数目，即LD-window。 <code>--ld-window-min</code>最小数目</li><li><code>--ld-window-bp INT</code> LD计算窗口的实际物理距离。<code>--ld-window-bp-min</code></li><li><code>--min-r2</code>小于r2相关系数值将不被展示</li><li><code>--interchrom-hap-r2</code>, <code>--interchrom-geno-r2</code>跨染色体的r2值计算。</li></ul></li><li><strong>Ts/Tv计算(transition/transversion )</strong><ul><li><code>TsTv INT</code> 计算INT值内的TsTv值，输出TsTv文件</li><li><code>TsTv-summary</code>TsTv值计算统计。</li><li><code>--TsTv-by-count</code>, <code>--TsTv-by-qual</code> 计算tstv率。</li><li><code>--FILTER-summary</code>添加到T值到FILTER列中</li></ul></li><li><strong>核酸多样性统计</strong><ul><li><code>--site-pi</code>计算所有位点的多样性值</li><li><code>--window-pi</code>, <code>--window-pi-step</code>计算窗口中的核酸多样性值</li></ul></li><li><strong>FST计算</strong><ul><li><code>--weir-fst-pop FILE</code>:file must contain a list of individuals (one individual per line) from the VCF file that correspond to one population，可多次，生成weir.fst文件</li><li><code>--fst-window-size</code>, <code>--fst-window-step</code> FSTc滑动窗口计算，重测序一般2kb-10kb</li></ul></li><li><strong>其它计算</strong><ul><li><code>--het</code> Calculates a measure of heterozygosity on a per-individual basis. </li><li><code>--hardy</code> 每个位点的哈温平衡计算的Pvalue。</li><li><code>--TajimaD INT</code> Tajima’s D 计算</li><li><code>--indv-freq-burden</code>：calculates the number of variants within each individual of a specific frequency.</li><li><code>--LROH</code>  Long Runs of Homozygosity</li><li><code>--relatedness</code>, <code>--relatedness2</code> 计算relatedness statistic</li><li><code>--site-quality</code>提取VCF文件中每个位点的QUAL信息</li><li><code>--missing-indv</code>计算每个样本的缺失率，输出imiss</li><li><code>--missing-site</code>计算每个位点的缺失率。</li><li><code>--SNPdensity INT</code> 一定窗口内的SNP数目和频率</li><li><code>--kept-sites</code>,<code>--remove-sites</code> 通过过滤的位点到另一文件kept.sites文件,removed.sites中</li><li><code>--singletons</code>  detailing the location of singletons</li><li><code>--hapcount BED</code> output the number of unique haplotypes within user specified bins.</li><li><code>--mendel PED</code> report mendel errors identified in trios.</li><li><code>--extract-FORMAT-info &lt;STRING&gt;</code> 提取format列中的指定TAG</li><li><code>--get-INFO &lt;string&gt;</code> 提取INFO列中信息</li></ul></li></ol><h4 id="输出格式转换"><a href="#输出格式转换" class="headerlink" title="输出格式转换"></a>输出格式转换</h4><ol><li><strong>输出参数</strong><ul><li><code>--recode</code>输出.recode.vcf新文件</li><li><code>--recode-INFO-all</code>保留所有的INFO信息</li></ul></li><li><strong>格式转换</strong><ul><li><code>--012</code> 012矩阵文件</li><li><code>--IMPUTE</code> impute文件</li><li><code>--ldhat-geno</code> <code>--ldhat</code> LDhat格式。</li><li><code>--BEAGLE-GL</code>, <code>--BEAGLE-PL</code></li><li><code>--plink</code>, <code>--plink-tped</code>, <code>--chrom-map</code>PLINK格式</li></ul></li></ol><h4 id="两个VCF文件的比较操作"><a href="#两个VCF文件的比较操作" class="headerlink" title="两个VCF文件的比较操作"></a>两个VCF文件的比较操作</h4><ol><li><strong>另外一个VCF文件的输入</strong><ul><li><code>--diff</code>,<code>--gzdiff</code>,<code>--diff-bcf</code> FILE</li><li><code>--not-chr</code>不同的chr跳过</li></ul></li><li><strong>比较参数</strong><ul><li><code>--diff-site</code> Outputs the sites that are common / unique to each file</li><li><code>--diff-indv</code> 不同的个体样本</li><li><code>--diff-site-discordance</code>, <code>--diff-indv-discordance</code>calculates discordance on a site by site basis.</li><li><code>--diff-indv-map &lt;filename&gt;</code> 指定ID文件进行比较</li><li><code>--diff-discordance-matrix</code> calculates a discordance matrix</li><li><code>--diff-switch-error</code> calculates phasing errors</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 生信工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Perl单行命令记录</title>
      <link href="/2019/12/26/Perl%E5%8D%95%E8%A1%8C%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/12/26/Perl%E5%8D%95%E8%A1%8C%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="Perl单行基本参数"><a href="#Perl单行基本参数" class="headerlink" title="Perl单行基本参数"></a>Perl单行基本参数</h3><ul><li><em><code>-e</code></em> 所有perl one-liner都需要添加的参数</li><li><em><code>-n</code></em> 将会循环读入每行文件，输出需要加‘print’</li><li><em><code>-p</code></em> 将会直接print每行</li><li><em><code>-i</code></em> 直接在源文件里进行修改了。 -i.bak 源文件备份</li><li><em><code>-l</code></em> 将会使输入字符串去掉回车符号，而输出再加上回车符号。</li><li><em><code>-a</code></em> 以空格为分割输入，并将分割的结果自动保存到@F数组中。</li><li><em><code>-F</code></em> 指定分割符号，需要与-a一起用<strong>直接加分割符号：</strong> 如perl -F:，可以使用正则表达式；可利用<code>scalar @F</code>查报错。</li></ul><p>常用<code>perl -F, -alne</code>：自动以,为分割符号，保存到数组@F中，循环读取每行并去除末位\n符号。</p><h3 id="Perl常用内置变量-predefined-variables"><a href="#Perl常用内置变量-predefined-variables" class="headerlink" title="Perl常用内置变量(predefined variables)"></a>Perl常用内置变量(predefined variables)</h3><ul><li><code>$_</code> 默认为每行的内容</li><li><code>$.</code> 为每行的行号数字，类似于awk中的<em>NR</em></li><li><code>$/</code> 输入的每行的分隔符，默认是<em>\n</em>,windows下有些文件是\n\r结尾。</li><li><code>$\</code> 输出的每行的分隔符。可指定</li><li><code>$1, $2, $3</code> 正则表达式中匹配到括号里的内容，从里往外数</li><li><code>$,</code> 标量之间的分割符号，例如<code>perl -le &#39;$,=&quot;:&quot;; print 1, 2, 3&#39;</code></li><li><code>$&quot;</code> 数组中的每个标量的分隔符，默认直接print数组是以\s空格分开。<code>perl -le &#39;$&quot;=&quot;:&quot;;@data=(1,2,3);print &quot;@data&quot;&#39;</code></li><li><code>$反引号 $&amp;, $&#39;</code>: 正则表达式中，匹配内容前、匹配内容、匹配内容后会默认赋值给这三个变量。<strong>实用</strong></li><li><code>@F</code> -a、-F参数将每行分割的内容自动加到数组@F中</li><li><code>@ARGV</code> 最常用的接受文件命令</li><li><code>%ENV</code> 系统环境中的一些变量加载到%ENV哈希中</li></ul><h3 id="间距、空行-spacing"><a href="#间距、空行-spacing" class="headerlink" title="间距、空行(spacing)"></a>间距、空行(spacing)</h3><p>对每行文件加空行：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">perl -pe <span class="string">'$\ = "\n"'</span></span><br><span class="line">perl -pe <span class="string">'$_ .="\n" unless /^$/ '</span></span><br></pre></td></tr></table></figure><p>去除空行:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">perl -<span class="keyword">ne</span> <span class="string">'print unless /^$/'</span></span><br><span class="line">perl -lne <span class="string">'print if length'</span></span><br></pre></td></tr></table></figure><hr><h3 id="对行处理：编号、计数-Numbering-、选择目标行输出"><a href="#对行处理：编号、计数-Numbering-、选择目标行输出" class="headerlink" title="对行处理：编号、计数(Numbering)、选择目标行输出"></a>对行处理：编号、计数(Numbering)、选择目标行输出</h3><p>仅对非空行计数，并显示行号：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">perl -pe <span class="string">' $_ .= "$.\t" '</span> file.txt</span><br><span class="line">perl -<span class="keyword">ne</span> <span class="string">'print ++$x . "\t$_" if /\S/'</span> file.txt</span><br></pre></td></tr></table></figure><p>输出 匹配到pattern的行，并显示行号：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">perl -<span class="keyword">ne</span> <span class="string">'print unless /pattern/'</span> file.txt <span class="comment">##除了目标匹配行</span></span><br><span class="line">perl -<span class="keyword">ne</span> <span class="string">'print "$.\t$_" if /regex/ '</span> file.txt</span><br><span class="line">perl -<span class="keyword">ne</span> <span class="string">'print ++$x."\t$_" if /reads/ '</span> test.log</span><br></pre></td></tr></table></figure><p>输出匹配到pattern行的下面的一行：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">perl -<span class="keyword">ne</span> <span class="string">' if($p=0)&#123;print; $p=0&#125; $p++ if /pattern/ '</span> file.txt</span><br><span class="line">perl -<span class="keyword">ne</span> <span class="string">'$p &amp;&amp; print &amp;&amp; ($p=0); $p++ if /pattern/'</span> file.txt</span><br><span class="line">perl -<span class="keyword">ne</span> <span class="string">'$p &amp;&amp; print; $p = /science/'</span></span><br></pre></td></tr></table></figure><p>输出匹配到/AAA/和/BBB/的行:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -<span class="keyword">ne</span> <span class="string">'/AAA/ &amp;&amp; /BBB/ &amp;&amp; print'</span></span><br></pre></td></tr></table></figure><p>输出第13行、或除了第13行；输出第13、19、50行；<strong>输出13~40行</strong></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">perl -<span class="keyword">ne</span> <span class="string">'print if $. == 13'</span> file.txt</span><br><span class="line">perl -<span class="keyword">ne</span> <span class="string">'print if $. != 13'</span> file.txt</span><br><span class="line">perl -<span class="keyword">ne</span> <span class="string">'$. == 13 &amp;&amp; print &amp;&amp; exit'</span></span><br><span class="line"></span><br><span class="line">perl -<span class="keyword">ne</span> <span class="string">'print if $.==13 || $.==19 || $.==40'</span> file.txt</span><br><span class="line"></span><br><span class="line">perl -<span class="keyword">ne</span> <span class="string">'print if $.&gt;=13 &amp;&amp; $.&lt;=40'</span> file.txt</span><br><span class="line">perl -<span class="keyword">ne</span> <span class="string">'print if 13..40'</span> file.txt</span><br></pre></td></tr></table></figure><p>输出START和END之间的行if/unless：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -i.old -<span class="keyword">ne</span> <span class="string">'print if /^START$/ .. /^END$/'</span> foo.txt</span><br></pre></td></tr></table></figure><p><strong>输出文件第三列、5列、最后一列或者1到20列:</strong></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">perl -F<span class="string">"\t"</span> -alne <span class="string">'print join "\t", @F[2,4,-1]'</span></span><br><span class="line">perl -F<span class="string">"\t"</span> -alne <span class="string">'print join "\t", @F[1..19]'</span></span><br></pre></td></tr></table></figure><p>仅输出奇数行、偶数行：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">perl -<span class="keyword">ne</span> <span class="string">'print if $. % 2'</span> text</span><br><span class="line">perl -<span class="keyword">ne</span> <span class="string">'print if $. %2==0'</span> text</span><br></pre></td></tr></table></figure><p><strong>仅输出文件中重复的行</strong>：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 出现两次就输出</span></span><br><span class="line">perl -<span class="keyword">ne</span> <span class="string">'print if ++$a&#123;$_&#125; ==2'</span></span><br></pre></td></tr></table></figure><p><strong>去重复行，仅输出第一次出现的行</strong>：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -<span class="keyword">ne</span> <span class="string">' print unless $a&#123;$_&#125;++ '</span> file.txt</span><br></pre></td></tr></table></figure><h3 id="计算相关"><a href="#计算相关" class="headerlink" title="计算相关"></a>计算相关</h3><p>输出第一列数字相加之和：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -alne <span class="string">'$sum+=$F[0];END&#123;print $sum&#125;'</span> file.txt</span><br></pre></td></tr></table></figure><p>输出时间：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">perl -le <span class="string">'print scalar(localtime)'</span></span><br><span class="line">perl -le <span class="string">'print join ":", (localtime)[2,1,0] '</span></span><br></pre></td></tr></table></figure><p>输出从5~15当中的10个随机数字</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -le <span class="string">'print join ",", map &#123; int(rand(15-5))+5 &#125; 1..10'</span></span><br></pre></td></tr></table></figure><h3 id="标量文字处理相关"><a href="#标量文字处理相关" class="headerlink" title="标量文字处理相关"></a>标量文字处理相关</h3><p>输出a到zz所有字母(..的使用)</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -le <span class="string">' $,=","; print a..zz '</span> <span class="comment"># print("a".."zz")</span></span><br></pre></td></tr></table></figure><p>输出指定长度的字符(x为重复)</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -le <span class="string">'print "a"x50'</span></span><br></pre></td></tr></table></figure><p>输出从1~100的质数(grep用法)</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">perl -le <span class="string">'@even = grep &#123;$_ % 2 == 0&#125; 1..100; print "@even"'</span></span><br><span class="line"><span class="string">``</span></span><br><span class="line"></span><br><span class="line">利用<span class="keyword">tr</span>(<span class="keyword">y</span>)修改字符</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`perl</span></span><br><span class="line"><span class="string">perl -le '$string = "bananas"; $string =~ y/A-Za-z/N-ZA-Mn-za-m/; print $string'</span></span><br><span class="line"><span class="string">perl -lpe 'y/A-Za-z/N-ZA-Mn-za-m/' bananas.txt</span></span><br></pre></td></tr></table></figure><p>自动转换大小写字符 \u \L</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">perl -lne <span class="string">'print "\u$_"'</span></span><br><span class="line">perl -plne <span class="string">'$_=\L$_\E'</span></span><br><span class="line">perl -ple <span class="string">' s/(\w+)/\u$1/g '</span></span><br></pre></td></tr></table></figure><p>去除每行开头、结尾的空格内容<code>s///g</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -ple <span class="string">' s/^\s+|\s+$//g '</span></span><br></pre></td></tr></table></figure><p>反向输出 数组的内容</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -F: -alne <span class="string">'$" = ","; print "@&#123;[reverse @F]&#125;"'</span> file.txt <span class="comment"># a:b:c:d:e</span></span><br></pre></td></tr></table></figure><p>在第N列之后添加新的一列：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -i -F<span class="string">"\t"</span> -alne <span class="string">'print join "\t", @F[0..N-1], "NEW_column", @F[N..$#F]'</span></span><br></pre></td></tr></table></figure><p>在第N行之后添加新的一行:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -pe <span class="string">'print "text\n" if $. == N; $. = 0 if eof'</span></span><br></pre></td></tr></table></figure><h3 id="生信常用perl脚本记录"><a href="#生信常用perl脚本记录" class="headerlink" title="生信常用perl脚本记录"></a>生信常用perl脚本记录</h3><p>批量根据id提取序列</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -lne <span class="string">'if($switch)&#123;if(/^&gt;/)&#123;$flag=0;m/^&gt;?(\S+).*?$/;$flag=1 if $need&#123;$1&#125;;&#125;print if $flag&#125;else&#123;m/^&gt;?(\S+).*?$/;$need&#123;$1&#125;++&#125;$switch=1 if eof(ARGV)'</span> id.txt seq.fasta &gt;seq_id.fas</span><br></pre></td></tr></table></figure><p>FastQ文件转为FastaA文件</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -e <span class="string">'&#123; while($id=&lt;&gt;) &#123; chomp $id; chomp ($seq=&lt;&gt;); &lt;&gt;; &lt;&gt;; $id=~s/^@/&gt;/;print " $id\n$seq\n"; &#125; &#125;'</span>  file.fq &gt;file.fa</span><br></pre></td></tr></table></figure><p>VCF文件中的第三列添加ID信息，以”chr:pos”命名</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -alne <span class="string">'print if/^#/;unless(/#/)&#123;$F[2]="$F[0]:$F[1]";$"="\t"; print"@F"&#125;'</span> test.vcf</span><br></pre></td></tr></table></figure><p>移动小于2000bytes的文件到另外的文件夹中</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l *xls | perl -F<span class="string">'/\s+/'</span> -alne <span class="string">'print "$F[8]\n" if $F[4] &lt; 1000'</span> |xargs -i mv &#123;&#125; ../DIR</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
            <tag> Perl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全基因组分析 || 选择压力分析_基础知识</title>
      <link href="/2019/12/25/%E5%85%A8%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%88%86%E6%9E%90_%E9%80%89%E6%8B%A9%E5%8E%8B%E5%8A%9B%E5%88%86%E6%9E%90/"/>
      <url>/2019/12/25/%E5%85%A8%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%88%86%E6%9E%90_%E9%80%89%E6%8B%A9%E5%8E%8B%E5%8A%9B%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p><img src="https://cdn.jsdelivr.net/gh/wang-tianpeng/image_hosting/tianpeng_pic/20191216163046.png" alt="基本原理"><br>原始群体中，遗传多样性是十分高的，整个序列的核酸diversity都高。而在受到选择之后，diversity会发生波动。核酸多样性下降 可能就是由于under selection导致的。</p><p>在演化/驯化过程中，如果某一基因X占优势，即X的基因型占据主导地位，则基因X所在区域的杂合率/多样性会显著下降。<strong>本质就是 比较基因组不同区域多样性（杂合率）的变化</strong></p><ul><li>群体遗传关心的问题：<ul><li>遗传结构（phylogeny+structure）</li><li><strong>基因组上受选择区域</strong>：群体水平基因组不同位置的区域遗传多样性变化的规律（例如：Pi、Tajima’s D, Fst）</li></ul></li><li>变异类型：<ul><li>中性突变（同义、相同类型的氨基酸、不影响环境适应性）：<strong>平衡选择，这种基因型频率是大致恒定的</strong></li><li>有利突变（正选择）：<strong>选择扫荡（Selective sweep），与有利突变的中性突变的频率会显著提升</strong><br><img src="https://cdn.jsdelivr.net/gh/wang-tianpeng/image_hosting/tianpeng_pic/20191216165322.png" alt="selective sweeps"></li><li>有害突变（负选择）：<strong>背景选择（negative selection/background selection/ purifying selection）</strong> 是潜在的噪音</li></ul></li></ul><p>负选择会对正选择有一定的干扰作用，都能产生大量的低频突变，但是正选择会产生相对较多的高频突变。</p><hr><h2 id="选择压力的分析方法"><a href="#选择压力的分析方法" class="headerlink" title="选择压力的分析方法"></a>选择压力的分析方法</h2><h3 id="单群体受选择区域的检验"><a href="#单群体受选择区域的检验" class="headerlink" title="单群体受选择区域的检验"></a>单群体受选择区域的检验</h3><p><img src="https://cdn.jsdelivr.net/gh/wang-tianpeng/image_hosting/tianpeng_pic/20191216172335.png" alt="sita计算"></p><ul><li>有效群体大小、每个位点突变速率</li><li><strong>sitaW</strong>：基于全部序列内分离位点的个数（差异位点/核酸碱基的数量）；<strong>对低频的突变更加敏感。</strong></li><li><strong>pi值</strong>：计算两两序列的差异度，然后求均值。与计算的群体有关：<ul><li>群体总体的pi：计算出的pi值即代表这个小群体的pi值，核酸多样性水平的高低。</li><li>基因组序列层面做检测，检测基因组不同区域的选择压力水平，一般采取滑动窗口的方式，例如以100kb的窗口10kb步移扫描pi值均值大小，从而计算序列层面不同区域的pi值变化。将pi值最极端区域（min 1%/5%）区域就作为受选择的区域</li></ul></li><li><strong>Tajima’s D</strong>。如果某个区域的Tajima’s D值下降了，则代表这个区域可能会受到选择（但是无法区分出正负选择 （高频突变会导致Pi值上升，而低频突变会导致W值上升）<br><img src="https://cdn.jsdelivr.net/gh/wang-tianpeng/image_hosting/tianpeng_pic/20191216173316.png" alt="Tajima&#39;s D"></li><li><strong>H检验(Fay &amp; Wu)</strong>：更关注正选择的高频突变。</li></ul><h3 id="两个亚群体之间的比较"><a href="#两个亚群体之间的比较" class="headerlink" title="两个亚群体之间的比较"></a>两个亚群体之间的比较</h3><p>多样性水平在亚群间比较，一般包括线性相关分析、亚群体间的差异比较两类。动植物重测序多是后者。Fst/pi ratio基于pi值。</p><ol><li><strong>群体分化程度Fst</strong> (Fixation index): 比较两个亚群体间的Pi值和亚群体内的Pi值的差异。<ul><li>由PI值计算演变来（序列两两差异取均值）</li><li>两个亚群体在某一段seq区域的差异度。0是无差异，数值越大，则说明两个亚群体之间已经发生了明显的分化（亚群内个体相似，亚群间差异大）</li></ul></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fst=(\pi(between) - \pi(within))/ \pi(between)</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>多样性变化倍数Pi ratio</strong>：某区间在亚群间的多样性差异的倍数，简单粗暴，就关注多样性值的高低变化。<ul><li>例如野生群体A/栽培群体B；野生群体A的多样性较高，而栽培群体B的多样性较低，所以多样性降低最显著的基因组区域，就与驯化改良基因相关</li></ul></li><li>其它比较值：<strong>ROD值</strong>、<strong>XP-CLR值</strong>等。而多个品种间的比较分化差异的<strong>di值</strong></li></ol><p>一般文章中都是将单群体的（PI, TajamaD）和多群体间比较的(Fst)值结合起来使用：单群体内多样性下降，两个群体间多样性分化程度上升，从而可能是受选择基因。（多是以滑动窗口的方法50k/100k）</p><hr><h2 id="所需材料和数据"><a href="#所需材料和数据" class="headerlink" title="所需材料和数据"></a>所需材料和数据</h2><ul><li>选择多品种，保证亚群体中更多的遗传多样性能被代表，在品种内少量个体即可（8个个体+以上基本可以）。</li><li>选择WGS，而非GBS。GBS可能~10K出现次标记，而在自然群体中，LD衰减快，如到0.1仅10K，导致丢失一些区域的信息。</li><li>测序深度：后续主流是10X。8X的深度最优性价比</li></ul><blockquote><p>参考学习资料：选择压力分析 <a href="https://www.omicshare.com/class/home/index/series?id=7" target="_blank" rel="noopener">https://www.omicshare.com/class/home/index/series?id=7</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 基因组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基因组分析 </tag>
            
            <tag> 选择压力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Daily-statistics_分位数</title>
      <link href="/2019/12/24/Daily-statistics-%E5%88%86%E4%BD%8D%E6%95%B0/"/>
      <url>/2019/12/24/Daily-statistics-%E5%88%86%E4%BD%8D%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="19-分位数相关：定义、QQ图-Quantile-Quantile-Plots-、分位数标准化-Quantile-Normalization"><a href="#19-分位数相关：定义、QQ图-Quantile-Quantile-Plots-、分位数标准化-Quantile-Normalization" class="headerlink" title="19. 分位数相关：定义、QQ图(Quantile-Quantile Plots)、分位数标准化(Quantile Normalization)"></a>19. 分位数相关：定义、QQ图(Quantile-Quantile Plots)、分位数标准化(Quantile Normalization)</h4><ol><li>分位数(quantile)定义：能把数据分成数量相等组的线。例如中位数50%median，将数据分为相等数量的组。0.25分位数，0.75分位数（1/15分位数点）。R语言中<code>quantile()</code>多种方法结果有略微差异。数据量小不用纠结</li></ol><p><img src="https://cdn.jsdelivr.net/gh/wang-tianpeng/image_hosting/tianpeng_pic/20191224144744.png" alt=""></p><ol start="2"><li><p><strong>想知道数据更接近哪一种分布，可以使用QQ图展示</strong>。<br><img src="https://cdn.jsdelivr.net/gh/wang-tianpeng/image_hosting/tianpeng_pic/20191218093848.png" alt=""><br>纵坐标为实际数据的分布，横坐标为预估分布的对应分位数点。看两者是否相吻合。</p></li><li><p>分位数标准化：例如用再芯片数据中对 去除<strong>技术误差(technical difference)（两个批次的仪器对数据产生的影响）</strong>、或者两组RNA-seq表达量数据的标准化。</p><ul><li>分位数标准化的过程：<br><img src="https://cdn.jsdelivr.net/gh/wang-tianpeng/image_hosting/tianpeng_pic/20191224151533.png" alt=""></li></ul></li></ol><p>标准化之后的数据有相同的四分位数。并保留了每组的顺序高低。</p>]]></content>
      
      
      <categories>
          
          <category> statistics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> StatQuest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生信单行脚本记录</title>
      <link href="/2019/12/23/%E7%94%9F%E4%BF%A1%E5%8D%95%E8%A1%8C%E8%84%9A%E6%9C%AC/"/>
      <url>/2019/12/23/%E7%94%9F%E4%BF%A1%E5%8D%95%E8%A1%8C%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h3 id="awk-amp-sed-amp-perl-单行操作"><a href="#awk-amp-sed-amp-perl-单行操作" class="headerlink" title="awk &amp; sed &amp; perl 单行操作"></a>awk &amp; sed &amp; perl 单行操作</h3><ul><li>输出第五列等于,不等于abc123的行<ul><li>分隔符<code>-F,</code></li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">awk '$5 == "abc123"' file.txt</span><br><span class="line">perl -alne 'print if $F[4]=="abc123"'</span><br><span class="line"></span><br><span class="line">awk '$5 != "abc123"' file.txt</span><br><span class="line">perl -alne 'print if $F[4]!="abc123"'</span><br><span class="line"></span><br><span class="line">awk -F, '$5 =="abc123"' file.txt</span><br><span class="line">perl -F, -alne 'print if $F[4]=="abc123"'</span><br></pre></td></tr></table></figure><ul><li>输出第7列不是以字母a-f开头的行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk '$7 !~ /^[a-f]/' file.txt</span><br><span class="line">perl -alne 'print if $F[6] !~ /^[a-f]/'</span><br></pre></td></tr></table></figure><ul><li>输出第2列的值比第5列大的行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk '$3&gt;$5' file.txt</span><br><span class="line">perl -alne 'print if $F[2]&gt;$F[4]'</span><br></pre></td></tr></table></figure><ul><li>计算第一列的累加值，输出结果<ul><li>计算平均值</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">awk '&#123;sum+=$1&#125; END&#123;print sum&#125;' file.txt</span><br><span class="line">perl -alne ' &#123;$sum+=$F[0]&#125;; END&#123;print"$sum\n"&#125; ' file.txt</span><br><span class="line"></span><br><span class="line">awk '&#123;sum+=$1&#125; END&#123;print x/NR&#125;' file.txt</span><br></pre></td></tr></table></figure><ul><li>消除开头或结尾的 空格或制表符，去除空行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed 's/^[\s\t]*//; s/[\s\t]*$//' file.txt</span><br><span class="line">sed '/^$//d' file.txt</span><br></pre></td></tr></table></figure><h3 id="find-xargs-sort-uniq-等"><a href="#find-xargs-sort-uniq-等" class="headerlink" title="find, xargs, sort, uniq 等"></a>find, xargs, sort, uniq 等</h3><ul><li><p>ls按照后缀名聚类显示<code>ls -X</code></p></li><li><p>查看csv/tsv文件表头有多少列（例如ncbi runinfo的表头信息）：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat runinfo.txt | head -1 | tr '\t' '\n' |wc -l</span><br></pre></td></tr></table></figure><ul><li>从文件中随机取10行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shuf file.txt | head -n 10</span><br></pre></td></tr></table></figure><ul><li>第二列出现最多的字符串</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cut -f 2 file.txt | sort |uniq -c |sort -k1 -nr</span><br></pre></td></tr></table></figure><ul><li>将所有.txt 文件修改为.bak(例如在对*.txt做操作之前用于文件备份)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name "*.txt" |sed 's/\.txt$//' | xargs -i echo mv &#123;&#125;.txt &#123;&#125;.bak |sh</span><br></pre></td></tr></table></figure><ul><li>输出一个特定的行（比如 42行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n 42p file.txt</span><br></pre></td></tr></table></figure><ul><li>通过parallel并行运行12个fastqc任务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find 0_raw_data | parallel -j 10 "fastqc &#123;&#125; --outdir ."</span><br></pre></td></tr></table></figure><ul><li>直接定义一个extract函数，直接extract解压缩(修改.bashrc)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">extract () &#123;</span><br><span class="line">   if [ -f $1 ] ; then</span><br><span class="line">       case $1 in</span><br><span class="line">        *.tar.bz2)      tar xvjf $1 ;;</span><br><span class="line">        *.tar.gz)       tar xvzf $1 ;;</span><br><span class="line">        *.tar.xz)       tar Jxvf $1 ;;</span><br><span class="line">        *.bz2)          bunzip2 $1 ;;</span><br><span class="line">        *.rar)          unrar x $1 ;;</span><br><span class="line">        *.gz)           gunzip $1 ;;</span><br><span class="line">        *.tar)          tar xvf $1 ;;</span><br><span class="line">        *.tbz2)         tar xvjf $1 ;;</span><br><span class="line">        *.tgz)          tar xvzf $1 ;;</span><br><span class="line">        *.zip)          unzip $1 ;;</span><br><span class="line">        *.Z)            uncompress $1 ;;</span><br><span class="line">        *.7z)           7z x $1 ;;</span><br><span class="line">        *)              echo "don't know how to extract '$1'..." ;;</span><br><span class="line">       esac</span><br><span class="line">   else</span><br><span class="line">       echo "'$1' is not a valid file!"</span><br><span class="line">   fi</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>把上次执行的命令生成一个脚本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "!!" &gt; foo.sh</span><br></pre></td></tr></table></figure><ul><li>反向互补序列</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 'ATTGCTATGCTNNNT' |rev |tr 'ACTG' 'TGAC'</span><br></pre></td></tr></table></figure><ul><li>更工整的输出格式</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat file.txt | column -t |less -S</span><br><span class="line">csvtk pretty ### install csvtk</span><br></pre></td></tr></table></figure><ul><li>对samtools mpileup并行化call SNP</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">BAM="yourFile.bam"</span><br><span class="line">REF="reference.fasta"</span><br><span class="line">samtools view -H $BAM</span><br><span class="line">    | grep "\@SQ"</span><br><span class="line">    | sed 's/^.*SN://g'</span><br><span class="line">    | cut -f 1</span><br><span class="line">    | xargs -I &#123;&#125; -n 1 -P 24 sh -c "samtools mpileup -BQ0 -d 100000 -uf $REF -r \"&#123;&#125;\" $BAM</span><br><span class="line">    | bcftools call -cv &gt; \"&#123;&#125;\".vcf"</span><br></pre></td></tr></table></figure><ul><li>对多个tsv/csv表根据表头columns对行rows合并。类似于dplyr中的left_join()</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 合并col_names相同的表</span></span></span><br><span class="line">csvtk concat names.csv names.reorder.csv |csvtk pretty</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 忽略大小写，保留空的行，以"NA"表示</span></span></span><br><span class="line">csvtk concat names.csv names.with-unmatched-colname.csv -i -u NA | csvtk pretty</span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li>crazyhottommy/bioinformatics-one-liners: <a href="https://github.com/crazyhottommy/bioinformatics-one-liners" target="_blank" rel="noopener">https://github.com/crazyhottommy/bioinformatics-one-liners</a></li><li>stephenturner/oneliners: <a href="https://github.com/stephenturner/oneliners" target="_blank" rel="noopener">https://github.com/stephenturner/oneliners</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Daily-statistics_概率和似然</title>
      <link href="/2019/12/21/Daily-statistics-%E6%A6%82%E7%8E%87%E5%92%8C%E4%BC%BC%E7%84%B6/"/>
      <url>/2019/12/21/Daily-statistics-%E6%A6%82%E7%8E%87%E5%92%8C%E4%BC%BC%E7%84%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="17-概率和似然-Probability-and-Likelihood"><a href="#17-概率和似然-Probability-and-Likelihood" class="headerlink" title="17. 概率和似然 Probability and Likelihood"></a>17. 概率和似然 Probability and Likelihood</h4><ol><li><p>概率就是在给定的分布情况下（固定不变fixed），一个区间内的面积即为此probability（变化的）。即 areas under a fixed distribution.<br><img src="https://cdn.jsdelivr.net/gh/wang-tianpeng/image_hosting/tianpeng_pic/20191207175856.png" alt="fig1"></p></li><li><p>在给定的数据分布点（fixed data points）下的可变化分布的Y轴值。即 y-axis values for fixed data points with distributions that can be moved.<br><img src="https://cdn.jsdelivr.net/gh/wang-tianpeng/image_hosting/tianpeng_pic/20191207180735.png" alt="fig2"></p></li></ol><h4 id="18-最大似然-Maximum-Likelihood"><a href="#18-最大似然-Maximum-Likelihood" class="headerlink" title="18. 最大似然 Maximum Likelihood"></a>18. 最大似然 Maximum Likelihood</h4><p>最大似然的目标是找到最能拟合数据分布的方法，例如已知的normal/Exponential/Gamma分布<br><img src="https://cdn.jsdelivr.net/gh/wang-tianpeng/image_hosting/tianpeng_pic/20191216220848.png" alt="fig3"><br>需要一个均值的位置点，能够最大化观测到测量重量的 似然值。均值的位置就是所有measurements的似然值能够最大。<strong>这就是估算平均值的最大似然</strong>。同理，找到能够最大化measurements的标准差的似然值。</p><h4 id="19-指数分布和其最大似然估计-The-exponential-distribution-and-its-Maximum-likelihood-estimate"><a href="#19-指数分布和其最大似然估计-The-exponential-distribution-and-its-Maximum-likelihood-estimate" class="headerlink" title="19. 指数分布和其最大似然估计(The exponential distribution and its Maximum likelihood estimate)"></a>19. 指数分布和其最大似然估计(The exponential distribution and its Maximum likelihood estimate)</h4><ol><li><p>Statistical distribution that models the time between events.(两个事件之间，时间的概率分布)</p><ul><li>一条短信收到后，再收到第二条短信的等待时间</li><li>一个视频被看过之后，下一个人再看这个视频中间所经过的时间。</li></ul></li><li><p>公式，及lambda推导的过程。在给定一组测量measurements，找到最佳的lambda，从而画出指数分布。<br><img src="https://cdn.jsdelivr.net/gh/wang-tianpeng/image_hosting/tianpeng_pic/20191219224331.png" alt="fig4"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> statistics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> StatQuest </tag>
            
            <tag> statistics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人网站+高效图床 搭建记录</title>
      <link href="/2019/12/20/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99-%E9%AB%98%E6%95%88%E5%9B%BE%E5%BA%8A-%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/12/20/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99-%E9%AB%98%E6%95%88%E5%9B%BE%E5%BA%8A-%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考文章：使用 Github Pages 和 Hexo 搭建自己的独立博客(<a href="https://blog.csdn.net/qq_36759224/article/details/82121420" target="_blank" rel="noopener">https://blog.csdn.net/qq_36759224/article/details/82121420</a>)<br>Github+jsDelivr+PicGo打造稳定快速、高效免费图床(<a href="https://blog.csdn.net/qq_36759224/article/details/98058240" target="_blank" rel="noopener">https://blog.csdn.net/qq_36759224/article/details/98058240</a>)<br>hexo常用命令笔记(<a href="https://segmentfault.com/a/1190000002632530" target="_blank" rel="noopener">https://segmentfault.com/a/1190000002632530</a>)<br>Hexo 博客优化之实用功能添加系列(<a href="https://itrhx.blog.csdn.net/article/details/85010191" target="_blank" rel="noopener">https://itrhx.blog.csdn.net/article/details/85010191</a>)</p></blockquote><ol><li><p>安装node.js, Git</p></li><li><p>安装Hexo</p><ul><li>安装 hexo</li><li>安装 hexo 部署到 git page 的 deployer<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir Blog</span><br><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Hexo初始化设置</p><ul><li>Hexo 安装完成后，将会在指定文件夹中新建所需要的文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir hexo</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure></li></ul></li><li><p>本地查看效果</p><ul><li><a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate #g</span><br><span class="line">hexo server #s</span><br></pre></td></tr></table></figure></li></ul></li><li><p>博客部署到Github上</p><ul><li>创建 New repository</li><li>配置 SSH密钥，在Blog文件夹下</li><li>Github网站配置SSH密钥</li><li>配置Hexo的_config.yml文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;wangtianpeng1994@hotmail.com&quot;</span><br><span class="line">ssh -T git@github.com</span><br><span class="line"></span><br><span class="line">git config --global user.name &quot;wang-tianpeng&quot;</span><br><span class="line">git config --global user.email &quot;wangtianpeng1994@hotmail.com&quot;</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/wang-tianpeng/wang-tianpeng.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Hexo文件夹下启动转移至Github</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li><li><p>在<code>\hexo\source\_posts</code>文件夹下书写markdown文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;文章标题&quot;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">layout: 页面布局（配合主题文档使用）</span><br><span class="line">title: 文章名称</span><br><span class="line">date: 文章日期</span><br><span class="line">comments: 文章是否开启评论</span><br><span class="line">photos: 文章封面图（仅部分主题支持）</span><br><span class="line">tags: </span><br><span class="line">  - 文章标签一</span><br><span class="line">  - 文章标签二</span><br><span class="line">categories: 文章分类</span><br><span class="line">description: 文章描述，即要在首页显示的摘要，而非全文显示。（仅部分主题支持）</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li><p>配置Hexo的主题</p><ul><li>找到各种主题的Github页面</li><li>在theme文件夹下 git clone</li><li>在主文件夹下配置_config.yml文件</li><li>主文件夹下 hexo g s d</li><li>各种主题：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></li><li>最终在挑选之后选择了<code>Yelee</code>主题<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next</span><br><span class="line"></span><br><span class="line">theme: hexo-theme-next</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line"></span><br><span class="line">hexo clean ## 清楚缓存</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></li></ul></li><li><p>添加页面访问统计</p><ul><li>在<code>themes/你的主题/layout/_partial/footer.ejs</code>文件下添加以下代码即可</li><li>参考网站：不蒜子统计(<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">http://ibruce.info/2015/04/04/busuanzi/</a>)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ol><ol start="10"><li>配置网络图床<ul><li>参考<a href="https://blog.csdn.net/qq_36759224/article/details/98058240" target="_blank" rel="noopener">Github+jsDelivr+PicGo</a></li><li>Github创建新仓库reporitory</li><li>Setting中设置新的token （注意不要关闭）repo项打勾</li><li>下载PicGO</li><li>配置成功后界面如下，可设置快捷键，截图+快捷键 自动操作。速度效率都十分不错，以后不再操心图床的问题。<br><img src="https://cdn.jsdelivr.net/gh/wang-tianpeng/image_hosting/tianpeng_pic/20191221144804.png" alt=""></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Daily_statistics_置信区间+Pvalue+单尾双尾P值</title>
      <link href="/2019/12/16/Daily-statistics/"/>
      <url>/2019/12/16/Daily-statistics/</url>
      
        <content type="html"><![CDATA[<h4 id="15-置信区间-Confidence-Intervals"><a href="#15-置信区间-Confidence-Intervals" class="headerlink" title="15. 置信区间 Confidence Intervals"></a>15. 置信区间 Confidence Intervals</h4><ol><li><p>bootstrap是计算置信区间的一个方法。</p></li><li><p>95%的置信区间能够覆盖95%的均值（覆盖了95%的bootstrap过程中产生的均值intervals that covers 95% of means that you calculated when you bootstrap the sample）。</p></li><li><p>95%的置信区间意味着 在这个置信区间之外发生一次事件的概率Pvalue是小于0.05<br><img src="https://cdn.jsdelivr.net/gh/wang-tianpeng/image_hosting/tianpeng_pic/20191207173822.png" alt=""></p></li><li><p>比较两组随机样本。首先对这个随机样本取Bootstrap的均值，&gt;1000次，然后比较bootstrap后均值的置信区间。如果两个样本的95%置信区间不同，则两个样本是具有统计学差异的；而如果两个样本的置信区间之间有部分重叠，则需要做T-test检验。<br><img src="https://cdn.jsdelivr.net/gh/wang-tianpeng/image_hosting/tianpeng_pic/20191207174608.png" alt=""></p></li></ol><h4 id="16-P-value值"><a href="#16-P-value值" class="headerlink" title="16. P-value值"></a>16. P-value值</h4><ol><li>Pvalue并不是完全指概率值。Pvalue is the probability that random chance generated the data, or something else that is equal or rarer.就是<strong>双尾的概率之和</strong>。例如二项分布的抛硬币实验。两次抛掷都为头（heads）的Pvalue是0.25+0.25+0.<br><img src="https://cdn.jsdelivr.net/gh/wang-tianpeng/image_hosting/tianpeng_pic/20191214161150.png" alt=""></li><li>而抛硬币5次，对于4正1反的Pvalue值。包括4正1反，1反4正，以及5正/5反的概率之和<br><img src="https://cdn.jsdelivr.net/gh/wang-tianpeng/image_hosting/tianpeng_pic/20191214161929.png" alt=""></li><li>和概率有区别。Pvalue就是衡量这个值是否有特别之处。例如得到平均值的pr为0.01，但P-value=1。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Statistics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> StatQuest </tag>
            
            <tag> statistics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World!</title>
      <link href="/2019/11/27/Hello_World/"/>
      <url>/2019/11/27/Hello_World/</url>
      
        <content type="html"><![CDATA[<h3 id="title1"><a href="#title1" class="headerlink" title="title1"></a>title1</h3><h4 id="title-2"><a href="#title-2" class="headerlink" title="title 2"></a>title 2</h4><p><strong>bold text</strong><br><em>italy text</em></p><p><strong>New photo</strong><br><img src="https://cdn.jsdelivr.net/gh/wang-tianpeng/image_hosting/tianpeng_pic/ibcas.png" alt="test"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd</span><br><span class="line">ls</span><br><span class="line">ls -1 *.txt |xargs -i wc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
